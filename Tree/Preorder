/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/*
说明add方法完全是可以加入null的
addAll一定不可以传入null
日常编码中，如果ArrayList中要addAll，必须提前进行判null处理。而调用add则无须此操作。
*/

//递归
/*
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();        
        if(root !=null){  
            list.add(root.val);
            list.addAll(preorderTraversal(root.left));
            list.addAll(preorderTraversal(root.right));
        }
        
        return list;
        
    }
}
*/
//迭代 ： 前序就是深度优先遍历，使用stack//根据栈的特点，先入栈右侧再左侧。
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new LinkedList<>(); 
        if(root ==null) return list;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            list.add(node.val);
            if(node.right !=null) stack.push(node.right);
            if(node.left !=null) stack.push(node.left);            
        }
        return list;
        
    }
}

