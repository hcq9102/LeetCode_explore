
回溯算法系列：
例子1：LeetCode78 Subset

/**
Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/
/*
核心：每个元素都有选或不选两种选择。
针对这个思想需要写两个回溯方程：
一个是选
一个是不选
*/

class Solution {
    public List<List<Integer>> subsets(int[] nums){
        List<List<Integer>> res = new LinkedList<>();
        if(nums==null || nums.length ==0) return res;
        helper(res, new LinkedList<>(),nums, 0);
        return res;
    }
    private void helper(List<List<Integer>> res, List<Integer> track, int[] nums, int index){
        if(index == nums.length){              //index已经到结尾
            res.add(new LinkedList<>(track));
            return;
        }
         //要这个元素的递归
        track.add(nums[index]);
        helper(res,track,nums,index+1);
        //不要这个元素的递归
        track.remove(track.size()-1);
        helper(res,track,nums,index+1);//跳过当前数字（index+1）,再进行选择
    }    
}
